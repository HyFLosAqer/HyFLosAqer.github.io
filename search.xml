<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>java基础语法</title>
      <link href="/2022/07/01/java-ji-chu-yu-fa/"/>
      <url>/2022/07/01/java-ji-chu-yu-fa/</url>
      
        <content type="html"><![CDATA[<h1 id="JAVA"><a href="#JAVA" class="headerlink" title="JAVA"></a>JAVA</h1><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><p>​     数据类型                    关键字      包装类型   内存占用取值范围</p><ul><li>字节型                       byte            Byte        1个字节-128~127</li><li>短整型                       short          Short       2个字节-32768~32767</li><li>整型                       int              Integer    4个字节-2^31~2^31-1</li><li>长整型                       long(L)         Long      8个字节-2^63~2^63-1</li><li>单精度浮点数           float(F)         Float      4个字节38位</li><li>双精度浮点数           double(D)    Double  8个字节308位</li><li>字符型                       char            Character  2个字节0~65535</li><li>布尔类型                   boolean      Boolean 1个字节true,false</li></ul><p>※数据范围和字节数不一定相关。如float范围比long大，但字节数小。</p><p>※浮点数是一个近似值：double s =4.0-3.6; //打印s为：0.3999999999</p><p>  其本质是<strong>科学计数法</strong>,</p><ul><li>第一位符号位,表示正负,0为负,1为正数</li><li>中间8(11)位即阶码,用以存贮指数位置的值</li><li>最后23(52)位即尾数,用以精确表示数字的值,各自精确小数点后6-7(15-16)</li></ul><p><img src="https://user-images.githubusercontent.com/105496252/176885809-33432ccf-cce0-4529-9fe2-e21b706e9df5.png" alt="浮点数据类型比特位分配"></p><p>※Infinity：无穷大，除以0可得，5.0/0</p><p>※NAN：not a number， 0.0/0</p><h3 id="变量名"><a href="#变量名" class="headerlink" title="变量名"></a>变量名</h3><p>只能包含                                <font color="red"> 字母 数字 _ $ </font></p><p>杜绝</p><ul><li>单个字母</li><li>中文（部分框架不允许）</li><li>中文拼音</li><li>不使用关键字</li></ul><p>建议</p><ul><li>小驼峰输入法 （第一个首字母不大写）   myScore， myJavaScore</li><li>大驼峰输入法（所有首字母都大写）</li><li>英文</li></ul><h3 id="变量计算"><a href="#变量计算" class="headerlink" title="变量计算"></a>变量计算</h3><h4 id="加减乘除"><a href="#加减乘除" class="headerlink" title="加减乘除"></a>加减乘除</h4><pre class="line-numbers language-none"><code class="language-none">如果参与运算的类型不一样，则自动转化为相同类型char\byte\short--int--long--float-doubleint*long=long*long    byte、char、short 在参与运算时，一律为int计算结果会溢出溢出不会报错，自动重新填(最大值加1为最小值) byte b1 = 5;byte b2 = 6;byte b3 = (byte)(b1+b2);System.out.println(2+2);     //4System.out.println(2+'2');   //52，2加上'2'的码50System.out.println('2'+'2'); //100，'2'的码50，加上'2'的码50<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="变量取值最大数"><a href="#变量取值最大数" class="headerlink" title="变量取值最大数"></a>变量取值最大数</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="强转数据类型"><a href="#强转数据类型" class="headerlink" title="强转数据类型"></a>强转数据类型</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> e <span class="token operator">=</span> <span class="token number">129</span><span class="token punctuation">;</span><span class="token keyword">byte</span> d <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> e<span class="token punctuation">;</span><span class="token comment">//注意溢出误差、精度丢失</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="两点原则"><a href="#两点原则" class="headerlink" title="两点原则"></a>两点原则</h4><ul><li>整数直接量可以直接赋值给byte,short,char，但不能超出范围</li><li>byte,short,char型数据参与运算时，系统会将其自动转换为int再运算</li></ul><h4 id="转义符（char类型）"><a href="#转义符（char类型）" class="headerlink" title="转义符（char类型）"></a>转义符（char类型）</h4><p>特殊符号需要通过\来转义</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">char</span> c1 <span class="token operator">=</span> <span class="token char">'女'</span><span class="token punctuation">;</span>  <span class="token comment">//字符女</span><span class="token keyword">char</span> c2 <span class="token operator">=</span> <span class="token char">'f'</span><span class="token punctuation">;</span>  <span class="token comment">//字符f</span><span class="token keyword">char</span> c3 <span class="token operator">=</span> <span class="token char">'6'</span><span class="token punctuation">;</span>  <span class="token comment">//字符6</span><span class="token keyword">char</span> c4 <span class="token operator">=</span> <span class="token char">'*'</span><span class="token punctuation">;</span>  <span class="token comment">//字符*</span><span class="token comment">//char c5 = 女; //编译错误，字符型直接量必须放在单引号中</span><span class="token comment">//char c6 = ''; //编译错误，单引号中必须有字符</span><span class="token comment">//char c7 = '25'; //编译错误，只能有一个字符</span><span class="token keyword">char</span> c8 <span class="token operator">=</span> <span class="token char">'\\'</span><span class="token punctuation">;</span> <span class="token comment">//\为特殊符号，需要通过\来转义</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c8<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//\</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="交换变量（三个杯子原理）"><a href="#交换变量（三个杯子原理）" class="headerlink" title="交换变量（三个杯子原理）"></a>交换变量（三个杯子原理）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token keyword">int</span> t <span class="token operator">=</span> a<span class="token punctuation">;</span>a <span class="token operator">=</span> b<span class="token punctuation">;</span>b <span class="token operator">=</span> t<span class="token punctuation">;</span><span class="token comment">//首尾相连</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">  <span class="token keyword">if</span>语句                           <span class="token keyword">switch</span>语句<span class="token keyword">if</span><span class="token punctuation">(</span>关系表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>                 <span class="token function">siwtch</span><span class="token punctuation">(</span>表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>语句体<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>关系表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token keyword">case</span> 常量值<span class="token number">1</span><span class="token operator">:</span> 语句体<span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>语句体<span class="token punctuation">;</span>                        <span class="token keyword">case</span> 常量值<span class="token number">2</span><span class="token operator">:</span> 语句体<span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                           …语句体<span class="token punctuation">;</span>                        <span class="token keyword">default</span><span class="token operator">:</span>语句体n<span class="token punctuation">;</span><span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">}</span>                               <span class="token punctuation">}</span>          <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>byte、short、int、char、String、枚举</p><p>在条件选择后以此为开始，向下贯穿。JAVA</p><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">普通<span class="token keyword">for</span>循环：    <span class="token keyword">for</span><span class="token punctuation">(</span>初始表达式<span class="token punctuation">;</span>布尔表达式<span class="token punctuation">;</span>步进表达式<span class="token punctuation">)</span><span class="token punctuation">{</span>     循环体；<span class="token punctuation">}</span><span class="token keyword">while</span>循环：    初始表达式<span class="token punctuation">;</span>  <span class="token keyword">while</span><span class="token punctuation">(</span>条件判断<span class="token punctuation">)</span><span class="token punctuation">{</span>     循环体<span class="token punctuation">;</span>步进语句<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">do</span><span class="token operator">-</span><span class="token keyword">while</span>循环：初始表达式<span class="token punctuation">;</span>   <span class="token keyword">do</span><span class="token punctuation">{</span>     循环体<span class="token punctuation">;</span>      步进语句<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>条件判断<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>break：跳出循环———–可以用在switch和循环中</li><li>continue：跳过循环体中剩余语句而进入下一次循环——只能用在循环中</li></ul><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a><strong>数组</strong></h2><h3 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h3><ul><li><p>System.arraycopy(a,1,b,0,4);</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//0,0,0,0,0,0</span><span class="token comment">//a:源数组</span><span class="token comment">//1:源数组的起始下标</span><span class="token comment">//b:目标数组</span><span class="token comment">//0:目标数组的起始下标</span><span class="token comment">//4:要复制的元素个数</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//灵活性好</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>int[] b = Arrays.copyOf(a,6);<br>a = Arrays.copyOf(a,a.length+1); //数组的扩容</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//a:源数组</span><span class="token comment">//b:目标数组</span><span class="token comment">//6:目标数组的长度</span><span class="token comment">//----若目标数组的长度&gt;源数组长度，则在末尾补默认值</span><span class="token comment">//----若目标数组的长度&lt;源数组长度，则将末尾的截掉</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> b <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>b<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//数组的扩容</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment">//数组的扩容(创建了一个更大的新的数组，并将数据复制进去了)</span>a <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token punctuation">.</span>length<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>a<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><ul><li><p>Arrays.sort(arr);</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//对arr进行升序排列</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"排序后:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"倒序输出"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//只是倒着显示，但数组中数据没有改变</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="数组异常"><a href="#数组异常" class="headerlink" title="数组异常"></a>数组异常</h3><ul><li>数组超过长度异常</li><li>空指针异常（NullPointerException）：栈上的变量为赋值null,指针被消除，与堆的联系中断</li></ul><h2 id="方法（函数）"><a href="#方法（函数）" class="headerlink" title="方法（函数）"></a>方法（函数）</h2><h3 id="定义五要素"><a href="#定义五要素" class="headerlink" title="定义五要素"></a>定义五要素</h3><ul><li><p>返回值可有（特定数据类型 int 、boolean、数组等等） 可无（void）</p></li><li><p>修饰词</p></li><li><p>方法名</p><p>见名字知意思</p></li><li><p>参数列表</p><ul><li>有参 传进去的为指针</li></ul><p>参数里面的数值表示引用，调用引用数据类型的地址和基本数据类型的地址</p><p>基本数据类型的值不能改变（改变为另一个声明，使用需要return）</p><p>应用数据类型不能改变对象，可以改变对象的值，数组的值</p></li><li><p>方法体</p></li></ul><h3 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h3><ol><li><p>方法：函数、过程</p><ul><li><p>封装一段特定的业务逻辑功能</p></li><li><p>尽可能独立，一个方法只干一件事</p></li><li><p>方法可以被反复调用多次</p></li><li><p>可以减少代码重复，有利于代码维护</p></li><li><p>何时用：假设有一个功能，在很多地方都得使用，就将功能封装到一个方法中</p></li><li><p>行参：声明方法变量时</p><p>实参：调用方法时</p></li></ul></li><li><p>方法的定义：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//无参无返回值</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"大家好，我叫WKJ，今年38岁了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//有参无返回值</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//形参</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"大家好，我叫"</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">"，今年38岁了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//有参无返回值</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//形参</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"大家好，我叫"</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">"，今年"</span><span class="token operator">+</span>age<span class="token operator">+</span><span class="token string">"岁了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//无参有返回值</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">getNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment">//若方法有返回值，则在方法中必须出现return关键字</span>    <span class="token comment">//并且return后的数的类型必须与返回值类型匹配</span>    <span class="token comment">//return "abc"; //编译错误</span>    <span class="token keyword">return</span> <span class="token number">8.88</span><span class="token punctuation">;</span> <span class="token comment">//1)结束方法的执行  2)返回结果给调用方</span><span class="token punctuation">}</span><span class="token comment">//有参有返回值</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">plus</span><span class="token punctuation">(</span><span class="token keyword">int</span> num1<span class="token punctuation">,</span><span class="token keyword">int</span> num2<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span> num <span class="token operator">=</span> num1<span class="token operator">+</span>num2<span class="token punctuation">;</span>    <span class="token keyword">return</span> num<span class="token punctuation">;</span> <span class="token comment">//返回的是num里面的那个数</span>    <span class="token comment">//return num1+num2; //返回的是num1与num2的和</span><span class="token punctuation">}</span><span class="token comment">//无参有返回值</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">testArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> arr<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>方法的调用：</p><ul><li><p>无返回值：方法名(有参传参);</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//调用say()方法</span>        <span class="token comment">//sayHi(); //编译错误，有参则必须传参</span>        <span class="token comment">//sayHi(250); //编译错误，参数类型必须匹配</span>        <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//String name="zhangsan"  //实参</span>        <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token string">"lisi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//String name="lisi"          //实参</span>        <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token string">"wangwu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//String name="wangwu"      //实参</span>        <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//实参 String name="zhangsan",int age=25</span>        <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token string">"lisi"</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//实参</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>有返回值：数据类型  变量  =  方法名(有参传参);</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//方法的演示</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MethodDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">double</span> a <span class="token operator">=</span> <span class="token function">getNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//getNum()的值就是return后的那个数</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//8.88，模拟对返回值的后续操作</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token function">plus</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//plus(5,6)的值就是return后的那个数</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//11，模拟对返回值的后续操作</span>        <span class="token keyword">int</span> m<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>n<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token function">plus</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//传递的是m和n里面的数</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//11，模拟对返回值的后续操作</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> d <span class="token operator">=</span> <span class="token function">testArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"长度为:"</span><span class="token operator">+</span>d<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//10，模拟对返回值的后续操作</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>d<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment">//模拟对返回值的后续操作</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p>return：</p><ul><li>return 值;  //1) 结束方法的执行  2) 返回结果给调用方</li><li>return;       //1) 结束方法的执行</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> -后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构_查找</title>
      <link href="/2022/07/01/xian-xing-suo-yin-cha-zhao/"/>
      <url>/2022/07/01/xian-xing-suo-yin-cha-zhao/</url>
      
        <content type="html"><![CDATA[<h1 id="线性索引查找"><a href="#线性索引查找" class="headerlink" title="线性索引查找"></a>线性索引查找</h1><h2 id="查找概论"><a href="#查找概论" class="headerlink" title="查找概论"></a>查找概论</h2><p>查找表按照操作方式有两大种</p><ul><li>静态查找表:只做查找操作</li><li>动态查找表:查找过程中同时进行增删元素</li></ul><h3 id="顺序表查找"><a href="#顺序表查找" class="headerlink" title="顺序表查找"></a>顺序表查找</h3><p>又称为顺序查找,遍历元素进行查找,</p><ul><li>算法时间复杂度为<em><strong>O(n)</strong></em></li></ul><h3 id="有序表查找"><a href="#有序表查找" class="headerlink" title="有序表查找"></a>有序表查找</h3><p>通过分隔点的不同,引入三种算法</p><h4 id="折半查找-二分查找"><a href="#折半查找-二分查找" class="headerlink" title="折半查找(二分查找)"></a>折半查找(二分查找)</h4><ul><li><p>前提 : 关键码有序(通常从小到大)</p><p>​           线性表必须使用顺序存储</p><p>​   更适合静态查找表(动态需要在增删后维护) </p></li><li><p>方法 :  类似于二叉树查找,取中间值比较大小,进入下一区域</p><p>​           进一步在下一区域 ,取中值比较大小….循环 </p></li><li><p>时间复杂度 :  <em><strong>O(logn)</strong></em></p></li></ul><h4 id="插值查找"><a href="#插值查找" class="headerlink" title="插值查找"></a>插值查找</h4><ul><li><p><strong>前提、时间复杂度</strong>近似于折半查</p></li><li><p>用法 : 类似于查找新华字典,会提前寻找一个大致字母的区域</p><p>​ 根据查找的关键词字key与查找表中的最大值与最小值的比较后查找</p><p><code>Mid = Begin + ( (End - Begin) / (A[End] - A[Begin]) ) * (X - A[Begin])</code></p><ul><li>Mid：计算得出的元素的位置；</li><li>End：搜索区域内最后一个元素所在的位置；</li><li>Begin：搜索区域内第一个元素所在的位置；</li><li>X：要查找的目标元素；</li><li>A[]：表示整个待搜索序列</li></ul></li><li><p>适用: 表较长,关键字分布比较均匀</p></li></ul><h4 id="斐波那切查找"><a href="#斐波那切查找" class="headerlink" title="斐波那切查找"></a>斐波那切查找</h4><p>算法核心</p><ul><li>斐波那契查找就是在二分查找的基础上根据斐波那契数列进行分割的。在斐波那契数列找一个等于略大于查找表中元素个数的数F[n]，将原查找表扩展为长度为Fn，完成后进行斐波那契分割，即F[n]个元素分割为前半部分F[n-1]个元素，后半部分F[n-2]个元素，找出要查找的元素在那一部分并递归，直到找到。</li><li>优势 :   <ol><li>查找以加法进行运算(插值为四则运算,折半为加法和除法)</li><li>时间复杂度虽然为 <em><strong>O(logn)</strong></em>,但平均性能大于折半(目标为1时为极端情况,会劣于前者)</li></ol></li></ul><h3 id="线性索引查找-1"><a href="#线性索引查找-1" class="headerlink" title="线性索引查找"></a>线性索引查找</h3><p>针对海量数据,关键码也不一定按照有序排列,不能遍历或者半遍历元素，就引入了索引</p><ul><li>索引即为将一个关键字和它对应的记录关联的过程</li><li>分为<strong>线性</strong>、<strong>树形</strong>、<strong>多级</strong>索引，这里主要介绍线性索引</li></ul><p><strong>线性索引</strong>即为将索引项集合组织为线性结构，也陈之为索引表,重点介绍以下几种</p><ul><li>稠密索引</li><li>分块索引</li><li>倒排索引</li></ul><h4 id="稠密索引"><a href="#稠密索引" class="headerlink" title="稠密索引"></a>稠密索引</h4><p>数据的每一个记录对应一个索引项</p><p><img src="https://user-images.githubusercontent.com/105496252/176885763-b4d74a30-ec4a-47c6-9918-79d6b3b49035.jpg" alt="稠密索引"></p><ul><li><p>优点: 数据项是无序的,索引项是有序的</p><p>​          可以对索引项进行有序查找</p></li><li><p>缺点 : 每一次查询需要在磁盘中读取更多内存,数据庞大时(上亿级别)</p><p>​          查询性能反而下降</p></li></ul><h4 id="分块索引"><a href="#分块索引" class="headerlink" title="分块索引"></a>分块索引</h4><p>类似如图书馆藏书管理体系.将数据集分成了若干块,各自建立索引项,指向各自的块内元素</p><ul><li><p>块内无序 : 理论上可以有序更好,但是需要花费不成正比的维护成本,故不做要求</p></li><li><p>快间有序 : 第N块所有元素的关键字永远<strong>全部</strong>小于第N+1块里的每个元素</p></li></ul><img src="https://user-images.githubusercontent.com/105496252/176885792-12a3eec1-28a8-4a32-9f6d-736ead78305e.png" alt="分块索引" style="zoom: 50%;"><p>最大关键码 : 每个块中关键字最大的元素关键码值</p><p>块长 : 每个块内元素的个数</p><p>块首指针 : 指向块首元素</p><ul><li>方法 : 在块间使用有序查找,在块内使用顺序查找(遍历)</li><li>时间复杂度 : ASL<sub>w</sub>=√n + 1  (介于顺序查找和折半查找之间)</li></ul><h4 id="倒排索引"><a href="#倒排索引" class="headerlink" title="倒排索引"></a>倒排索引</h4><p>通用结构</p><ul><li>次关键码 : 类似于搜索引擎中的关键字</li><li>记录号表 : 类似于搜索引擎中对应出的整体文章标号</li></ul><p>其中记录号表存储的具有相同次关键词的所有的记录的记录号(可以是指向记录的指针或者是该记录的关键字)</p><ul><li>优点 : 查找非常快</li><li>缺点 : 维护比较困难,每一个记录号都将对应好几个文章,插入删除需要额外的处理</li></ul>]]></content>
      
      
      <categories>
          
          <category> -数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的第一篇博客</title>
      <link href="/2022/06/29/wo-de-di-yi-pian-bo-ke/"/>
      <url>/2022/06/29/wo-de-di-yi-pian-bo-ke/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
